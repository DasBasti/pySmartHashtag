[project]
name = "pySmartHashtag"
version = "0.2.9"
authors = [
    {"name" = "Bastian Neumann", "email" = "neumann.bastian@gmail.com"},
]
description = "A python library to get information from Smart #1 and #3 web API"
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/DasBasti/pySmartHashtag"
Issues = "https://github.com/DasBasti/pySmartHashtag/issues"

[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"

[tool.pytest.ini_options]
asyncio_mode = "strict"

[tool.mypy]
show_error_codes = true
enable_error_code = "ignore-without-code"

[tool.ruff]
target-version = "py38"
line-length = 120

select = [
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "I",  # isort
    "W",  # pycodestyle
    "UP",  # pyupgrade
    "PGH004",  # Use specific rule codes when using noqa
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D212",  # Multi-line docstring summary should start at the first line
    "D213",  # Multi-line docstring summary should start at the second line
    "D100", # Missing docstring in public module
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
]

exclude = [
]

[tool.ruff.per-file-ignores]
"docs/source/conf.py" = ["D100"]
"pysamerhashtag/api/authentication.py" = ["D102", "D107"]

[tool.ruff.mccabe]
max-complexity = 25
